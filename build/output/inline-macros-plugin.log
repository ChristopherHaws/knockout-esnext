
Running Rollup inline-macros plugin
for Knockout JavaScript library v3.5.1-mod10-esnext


------- src/virtualElements.js --------

[virtualElements.js:19]
Found macro: "_isStartComment" 

[virtualElements.js:20]
Found macro: "_isEndComment" 

[virtualElements.js:31]
Inlined: "_isEndComment"
OLD:  if (_isEndComment(currentNode)) {
NEW:  if (((currentNode.nodeType === 8) && END_COMMENT_REGEX.test(currentNode.nodeValue))) {

[virtualElements.js:38]
Inlined: "_isStartComment"
OLD:  if (_isStartComment(currentNode)) {
NEW:  if (((currentNode.nodeType === 8) && START_COMMENT_REGEX.test(currentNode.nodeValue))) {

[virtualElements.js:58]
Inlined: "_isStartComment"
OLD:  export const childNodes = (node) => _isStartComment(node) ? _getVirtualChildren(node) : node.childNodes;
NEW:  export const childNodes = (node) => ((node.nodeType === 8) && START_COMMENT_REGEX.test(node.nodeValue)) ? _getVirtualChildren(node) : node.childNodes;

[virtualElements.js:61]
Inlined: "_isStartComment"
OLD:  if (!_isStartComment(node)) {
NEW:  if (!((node.nodeType === 8) && START_COMMENT_REGEX.test(node.nodeValue))) {

[virtualElements.js:72]
Inlined: "_isStartComment"
OLD:  if (!_isStartComment(node)) {
NEW:  if (!((node.nodeType === 8) && START_COMMENT_REGEX.test(node.nodeValue))) {

[virtualElements.js:86]
Inlined: "_isStartComment"
OLD:  if (_isStartComment(containerNode)) {
NEW:  if (((containerNode.nodeType === 8) && START_COMMENT_REGEX.test(containerNode.nodeValue))) {

[virtualElements.js:109]
Inlined: "_isStartComment"
OLD:  if (_isStartComment(containerNode)) {
NEW:  if (((containerNode.nodeType === 8) && START_COMMENT_REGEX.test(containerNode.nodeValue))) {

[virtualElements.js:121]
Inlined: "_isStartComment"
OLD:  if (!_isStartComment(node)) {
NEW:  if (!((node.nodeType === 8) && START_COMMENT_REGEX.test(node.nodeValue))) {

[virtualElements.js:123]
Inlined: "_isEndComment"
OLD:  if (_nodeFirstChild && _isEndComment(_nodeFirstChild)) {
NEW:  if (_nodeFirstChild && ((_nodeFirstChild.nodeType === 8) && END_COMMENT_REGEX.test(_nodeFirstChild.nodeValue))) {

[virtualElements.js:129]
Inlined: "_isEndComment"
OLD:  if (!_nodeNextSibling|| _isEndComment(_nodeNextSibling)) {
NEW:  if (!_nodeNextSibling|| ((_nodeNextSibling.nodeType === 8) && END_COMMENT_REGEX.test(_nodeNextSibling.nodeValue))) {

[virtualElements.js:136]
Inlined: "_isStartComment"
OLD:  if (_isStartComment(node)) {
NEW:  if (((node.nodeType === 8) && START_COMMENT_REGEX.test(node.nodeValue))) {

[virtualElements.js:140]
Inlined: "_isEndComment"
OLD:  if (_nodeNextSibling && _isEndComment(_nodeNextSibling)) {
NEW:  if (_nodeNextSibling && ((_nodeNextSibling.nodeType === 8) && END_COMMENT_REGEX.test(_nodeNextSibling.nodeValue))) {


------- src/memoization.js --------

[memoization.js:8]
Found macro: "parseMemoText" 

[memoization.js:50]
Inlined: "parseMemoText"
OLD:  memoId = parseMemoText(nodeValue);
NEW:  memoId = (nodeValue.startsWith(MEMO_TEXT_START) ? nodeValue.substr(9, nodeValue.length - 10) : null);


------- src/subscribables/dependencyDetection.js --------

[dependencyDetection.js:32]
Found macro: "_getId" 

[dependencyDetection.js:39]
Inlined: "_getId"
OLD:  currentFrame.callback.call(currentFrame.callbackTarget, subscribable, subscribable._id || (subscribable._id = _getId()));
NEW:  currentFrame.callback.call(currentFrame.callbackTarget, subscribable, subscribable._id || (subscribable._id = (++lastId)));


------- src/templating/templateSources.js --------

[templateSources.js:42]
Found macro: "_getTemplateDomData" 

[templateSources.js:82]
Inlined: "_getTemplateDomData"
OLD:  let templateData = _getTemplateDomData(element),
NEW:  let templateData = (getDomData(element, TEMPLATES_DOM_DATA_KEY) || {}),

[templateSources.js:123]
Inlined: "_getTemplateDomData"
OLD:  let templateData = _getTemplateDomData(this.domElement);
NEW:  let templateData = (getDomData(this.domElement, TEMPLATES_DOM_DATA_KEY) || {});


------- src/binding/bindingProvider.js --------

[bindingProvider.js:7]
Found macro: "virtualNodeBindingValue" 

[bindingProvider.js:16]
Found macro: "_getBindingsString" 

[bindingProvider.js:38]
Inlined: "_getBindingsString"
OLD:  let bindingsString = _getBindingsString(node),
NEW:  let bindingsString = (node.nodeType === 1 ? node.getAttribute(DEFAULT_BINDING_ATTRIBUTE_NAME) : node.nodeType === 8 ? virtualNodeBindingValue(node) : null),

[bindingProvider.js:38]
Inlined: "virtualNodeBindingValue"  [iteration #2]
OLD:  let bindingsString = _getBindingsString(node),
NEW:  let bindingsString = (node.nodeType === 1 ? node.getAttribute(DEFAULT_BINDING_ATTRIBUTE_NAME) : node.nodeType === 8 ? (START_COMMENT_REGEX.test(node.nodeValue) ? RegExp.$1 : null) : null),

[bindingProvider.js:44]
Inlined: "_getBindingsString"
OLD:  let bindingsString = _getBindingsString(node),
NEW:  let bindingsString = (node.nodeType === 1 ? node.getAttribute(DEFAULT_BINDING_ATTRIBUTE_NAME) : node.nodeType === 8 ? virtualNodeBindingValue(node) : null),

[bindingProvider.js:44]
Inlined: "virtualNodeBindingValue"  [iteration #2]
OLD:  let bindingsString = _getBindingsString(node),
NEW:  let bindingsString = (node.nodeType === 1 ? node.getAttribute(DEFAULT_BINDING_ATTRIBUTE_NAME) : node.nodeType === 8 ? (START_COMMENT_REGEX.test(node.nodeValue) ? RegExp.$1 : null) : null),


------- src/binding/bindingAttributeSyntax.js --------

[bindingAttributeSyntax.js:42]
Found macro: "_getBindingInfoForNode" 

[bindingAttributeSyntax.js:43]
Found macro: "_ensureNodeHasDomData" 

[bindingAttributeSyntax.js:44]
Found macro: "_getOrAddBindingInfoInDomData" 

[bindingAttributeSyntax.js:561]
Found macro: "_getBindingContext"  (MULTI-LINE-EXPRESSION)

[bindingAttributeSyntax.js:195]
[ERROR] Mismatch formal parameters (1) <> invocation (2): 
 -> macro: _getBindingInfoForNode
 -> usage:     let bindingInfo = _getBindingInfoForNode(node, BINDING_INFO_DOM_DATA_KEY),


[bindingAttributeSyntax.js:259]
Inlined: "_ensureNodeHasDomData"
OLD:  _ensureNodeHasDomData(node);
NEW:  (node[DOM_DATASTORE_PROP] || (node[DOM_DATASTORE_PROP] = {}));

[bindingAttributeSyntax.js:260]
Inlined: "_ensureNodeHasDomData"
OLD:  let nodeDomData = _ensureNodeHasDomData(node),
NEW:  let nodeDomData = (node[DOM_DATASTORE_PROP] || (node[DOM_DATASTORE_PROP] = {})),

[bindingAttributeSyntax.js:261]
Inlined: "_getOrAddBindingInfoInDomData"
OLD:  bindingInfo = _getOrAddBindingInfoInDomData(nodeDomData),
NEW:  bindingInfo = (nodeDomData[BINDING_INFO_DOM_DATA_KEY] || (nodeDomData[BINDING_INFO_DOM_DATA_KEY] = {})),

[bindingAttributeSyntax.js:271]
Inlined: "_getBindingInfoForNode"
OLD:  let bindingInfo = _getBindingInfoForNode(node);
NEW:  let bindingInfo = (node[DOM_DATASTORE_PROP] && node[DOM_DATASTORE_PROP][BINDING_INFO_DOM_DATA_KEY]);

[bindingAttributeSyntax.js:293]
Inlined: "_ensureNodeHasDomData"
OLD:  let nodeDomData = _ensureNodeHasDomData(node),
NEW:  let nodeDomData = (node[DOM_DATASTORE_PROP] || (node[DOM_DATASTORE_PROP] = {})),

[bindingAttributeSyntax.js:294]
Inlined: "_getOrAddBindingInfoInDomData"
OLD:  bindingInfo = _getOrAddBindingInfoInDomData(nodeDomData);
NEW:  bindingInfo = (nodeDomData[BINDING_INFO_DOM_DATA_KEY] || (nodeDomData[BINDING_INFO_DOM_DATA_KEY] = {}));

[bindingAttributeSyntax.js:408]
Inlined: "_ensureNodeHasDomData"
OLD:  let nodeDomData = _ensureNodeHasDomData(node),
NEW:  let nodeDomData = (node[DOM_DATASTORE_PROP] || (node[DOM_DATASTORE_PROP] = {})),

[bindingAttributeSyntax.js:409]
Inlined: "_getOrAddBindingInfoInDomData"
OLD:  bindingInfo = _getOrAddBindingInfoInDomData(nodeDomData);
NEW:  bindingInfo = (nodeDomData[BINDING_INFO_DOM_DATA_KEY] || (nodeDomData[BINDING_INFO_DOM_DATA_KEY] = {}));

[bindingAttributeSyntax.js:566]
Inlined: "_getBindingContext"
OLD:  return _applyBindingsToNodeInternal(node, bindings, _getBindingContext(viewModelOrBindingContext, undefined));
NEW:  return _applyBindingsToNodeInternal(node, bindings, ( (viewModelOrBindingContext && viewModelOrBindingContext[IS_BINDING_CONTEXT_INSTANCE]) ? viewModelOrBindingContext : new KoBindingContext(viewModelOrBindingContext, undefined, undefined, undefined)));

[bindingAttributeSyntax.js:570]
Inlined: "_getBindingContext"
OLD:  let context = _getBindingContext(viewModelOrBindingContext, undefined),
NEW:  let context = ( (viewModelOrBindingContext && viewModelOrBindingContext[IS_BINDING_CONTEXT_INSTANCE]) ? viewModelOrBindingContext : new KoBindingContext(viewModelOrBindingContext, undefined, undefined, undefined)),

[bindingAttributeSyntax.js:588]
Inlined: "_getBindingContext"
OLD:  _applyBindingsToDescendantsInternal(_getBindingContext(viewModelOrBindingContext, undefined), rootNode);
NEW:  _applyBindingsToDescendantsInternal(( (viewModelOrBindingContext && viewModelOrBindingContext[IS_BINDING_CONTEXT_INSTANCE]) ? viewModelOrBindingContext : new KoBindingContext(viewModelOrBindingContext, undefined, undefined, undefined)), rootNode);

[bindingAttributeSyntax.js:601]
Inlined: "_getBindingContext"
OLD:  _applyBindingsToNodeAndDescendantsInternal(_getBindingContext(viewModelOrBindingContext, extendContextCallback), rootNode);
NEW:  _applyBindingsToNodeAndDescendantsInternal(( (viewModelOrBindingContext && viewModelOrBindingContext[IS_BINDING_CONTEXT_INSTANCE]) ? viewModelOrBindingContext : new KoBindingContext(viewModelOrBindingContext, undefined, undefined, extendContextCallback)), rootNode);

[bindingAttributeSyntax.js:607]
Inlined: "_getBindingInfoForNode"
OLD:  let bindingInfo =  node && _getBindingInfoForNode(node);
NEW:  let bindingInfo =  node && (node[DOM_DATASTORE_PROP] && node[DOM_DATASTORE_PROP][BINDING_INFO_DOM_DATA_KEY]);

[bindingAttributeSyntax.js:614]
Inlined: "_getBindingInfoForNode"
OLD:  let bindingInfo = node && (node.nodeType === 1 || node.nodeType === 8) && _getBindingInfoForNode(node),
NEW:  let bindingInfo = node && (node.nodeType === 1 || node.nodeType === 8) && (node[DOM_DATASTORE_PROP] && node[DOM_DATASTORE_PROP][BINDING_INFO_DOM_DATA_KEY]),



=================================================
Rollup inline-macros plugin finished with 1 ERROR
Found macros: 11 | Inlined usages: 34
=================================================